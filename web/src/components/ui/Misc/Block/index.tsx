import React, { useMemo } from 'react';
import classNames from 'classnames';

import type { BlockProps } from './types';

export type { BlockProps };

const Block = React.forwardRef<HTMLElement, BlockProps>(
  (
    {
      background,
      border,
      borderFirst,
      borderSize,
      children,
      className,
      colAlign,
      colGap,
      colJustify,
      element = 'div',
      inset,
      insetSize,
      isColumn,
      isFullHeight,
      isRounded,
      isRow,
      isRowInline,
      isShadowed,
      isStretch,
      offset,
      offsetFirst,
      offsetSize,
      position,
      roundedSize,
      rowAlign,
      rowGap,
      rowJustify,
      rowWrap,
      scroll,
      shadowSize,
      textAlign,
      ...rest
    },
    ref
  ) => {
    const classes = useMemo(
      () =>
        classNames(className, {
          '-h-full': !!isFullHeight,

          '-abs': position === 'absolute',
          '-rel': position === 'relative',

          '-off': !!offset,
          '--off-x': offset === 'sides',
          '--off-all': offset === 'all',
          '--off-xxs': offsetSize === 'xxs',
          '--off-xs': offsetSize === 'xs',
          '--off-sm': offsetSize === 'sm',
          '--off-lg': offsetSize === 'lg',
          '--off-xl': offsetSize === 'xl',
          '--off-xxl': offsetSize === 'xxl',
          '--off-x-xxs': !!offsetSize?.startsWith('xxs,'),
          '--off-x-xs': !!offsetSize?.startsWith('xs,'),
          '--off-x-sm': !!offsetSize?.startsWith('sm,'),
          '--off-x-md': !!offsetSize?.startsWith('md,'),
          '--off-x-lg': !!offsetSize?.startsWith('lg,'),
          '--off-x-xl': !!offsetSize?.startsWith('xl,'),
          '--off-x-xxl': !!offsetSize?.startsWith('xxl,'),
          '--off-y-xxs': !!offsetSize?.startsWith('xxs,'),
          '--off-y-xs': !!offsetSize?.endsWith(',xs'),
          '--off-y-sm': !!offsetSize?.endsWith(',sm'),
          '--off-y-md': !!offsetSize?.endsWith(',md'),
          '--off-y-lg': !!offsetSize?.endsWith(',lg'),
          '--off-y-xl': !!offsetSize?.endsWith(',xl'),
          '--off-y-xxl': !!offsetSize?.endsWith(',xxl'),
          '--off-follow': offsetFirst === false,

          '-in': !!inset,
          '--in-x': inset === 'sides',
          '--in-y': inset === 'top-bottom',
          '--in-x-end': inset === 'inline-end',
          '--in-x-start': inset === 'inline-start',
          '--in-y-end': inset === 'block-end',
          '--in-y-start': inset === 'block-start',
          '--in-xxs': insetSize === 'xxs',
          '--in-xs': insetSize === 'xs',
          '--in-sm': insetSize === 'sm',
          '--in-lg': insetSize === 'lg',
          '--in-xl': insetSize === 'xl',
          '--in-xxl': insetSize === 'xxl',
          '--in-x-xxs': !!insetSize?.startsWith('xxs,'),
          '--in-x-xs': !!insetSize?.startsWith('xs,'),
          '--in-x-sm': !!insetSize?.startsWith('sm,'),
          '--in-x-md': !!insetSize?.startsWith('md,'),
          '--in-x-lg': !!insetSize?.startsWith('lg,'),
          '--in-x-xl': !!insetSize?.startsWith('xl,'),
          '--in-x-xxl': !!insetSize?.startsWith('xxl,'),
          '--in-y-xxs': !!insetSize?.startsWith('xxs,'),
          '--in-y-xs': !!insetSize?.endsWith(',xs'),
          '--in-y-sm': !!insetSize?.endsWith(',sm'),
          '--in-y-md': !!insetSize?.endsWith(',md'),
          '--in-y-lg': !!insetSize?.endsWith(',lg'),
          '--in-y-xl': !!insetSize?.endsWith(',xl'),
          '--in-y-xxl': !!insetSize?.endsWith(',xxl'),

          '-col': !!isColumn,
          '--col-align-b': colAlign === 'baseline',
          '--col-align-c': colAlign === 'center',
          '--col-align-e': colAlign === 'end',
          '--col-align-s': colAlign === 'start',
          '--col-just-c': colJustify === 'center',
          '--col-just-e': colJustify === 'end',
          '--col-gap-n': colGap === 'none',
          '--col-gap-xs': colGap === 'xs',
          '--col-gap-sm': colGap === 'sm',
          '--col-gap-lg': colGap === 'lg',
          '--col-gap-xl': colGap === 'xl',

          '-row': !!isRow,
          '--row-inline': !!isRowInline,
          '--row-align-b': rowAlign === 'baseline',
          '--row-align-c': rowAlign === 'center',
          '--row-align-e': rowAlign === 'end',
          '--row-align-s': rowAlign === 'start',
          '--row-just-c': rowJustify === 'center',
          '--row-just-e': rowJustify === 'end',
          '--row-gap-n': rowGap === 'none',
          '--row-gap-xs': rowGap === 'xs',
          '--row-gap-sm': rowGap === 'sm',
          '--row-gap-lg': rowGap === 'lg',
          '--row-gap-xl': rowGap === 'xl',
          '--row-gap-x-xs': !!rowGap?.startsWith('xs,'),
          '--row-gap-x-sm': !!rowGap?.startsWith('sm,'),
          '--row-gap-x-lg': !!rowGap?.startsWith('lg,'),
          '--row-gap-x-xl': !!rowGap?.startsWith('xl,'),
          '--row-gap-y-xs': !!rowGap?.endsWith(',xs'),
          '--row-gap-y-sm': !!rowGap?.endsWith(',sm'),
          '--row-gap-y-lg': !!rowGap?.endsWith(',lg'),
          '--row-gap-y-xl': !!rowGap?.endsWith(',xl'),
          '--row-wrap': rowWrap === 'wrap',

          '-grow': !!isStretch,

          '-align --end': textAlign === 'end',
          '-align --center': textAlign === 'center',

          '-b': !!border,
          '--b-top': border === 'top',
          '--b-end': border === 'end',
          '--b-bottom': border === 'bottom',
          '--b-start': border === 'start',
          '--b-none': border === false || border === 'none',
          '--b-lg': borderSize === 'lg',
          '--b-xl': borderSize === 'xl',
          '--b-follow': borderFirst === false,

          '-rd': !!isRounded,
          '--rd-sm': roundedSize === 'sm',
          '--rd-lg': roundedSize === 'lg',
          '--rd-xl': roundedSize === 'xl',

          '-bg': background === true,
          '-bg-2': background === 'secondary',
          '-bg-3': background === 'tertiary',

          '-sh': !!isShadowed,
          '--sh-sm': shadowSize === 'sm',
          '--sh-lg': shadowSize === 'lg',

          '-scroll-none': scroll === 'none',
          '-scroll-x': scroll === 'x',
          '-scroll-y': scroll === 'y',
        }),
      [
        background,
        border,
        borderFirst,
        borderSize,
        className,
        colAlign,
        colGap,
        colJustify,
        inset,
        insetSize,
        isColumn,
        isFullHeight,
        isRounded,
        isRow,
        isRowInline,
        isShadowed,
        isStretch,
        offset,
        offsetFirst,
        offsetSize,
        position,
        roundedSize,
        rowAlign,
        rowGap,
        rowJustify,
        rowWrap,
        scroll,
        shadowSize,
        textAlign,
      ]
    );

    return React.createElement(element, { className: classes, ref, ...rest }, children);
  }
);

export default React.memo(Block);
